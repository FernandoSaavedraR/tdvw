DROP PROCEDURE IF EXISTS ALTA_CLIENTE;
DELIMITER //

CREATE PROCEDURE ALTA_CLIENTE(FNAME VARCHAR(50),LNAME VARCHAR(50),SEX BOOL,
USERS TEXT,PASS TEXT,DIR TEXT,NUMEROS TEXT,CVVV INT,BANCOS TEXT)
BEGIN
	DECLARE EXISTE INT;
	DECLARE ID INT;
	SET EXISTE = (SELECT COUNT(USUARIO.USUARIO) FROM USUARIO WHERE USERS = USUARIO);
	IF (EXISTE > 0) THEN
		SELECT "USUARIO YA EXISTENTE" AS MENSAJE;
	ELSE 
		INSERT INTO PERSONA(NOMBRE,APELLIDOS,SEXO) VALUES(FNAME,LNAME,SEX);
		SET ID = LAST_INSERT_ID();
		INSERT INTO USUARIO (USUARIO,CONTRASENA,ID_PERSONA,TIPO) VALUES (USERS,MD5(PASS),ID,"CLIENTE");
		INSERT INTO DIRECCIONES(DIRECCION) VALUES (DIR);
		INSERT INTO REL_DIR_PERSONA (ID_PERSONA,ID_DIRECCION) VALUES (ID,LAST_INSERT_ID());
		INSERT INTO TARJETA (NUMERO,CVV,BANCO,FONDOS) VALUES (NUMEROS,CVVV,BANCOS,CAST(RAND()*10000 AS INT));
		INSERT INTO REL_TARJETA_USUARIO (ID_TARJETA,ID_USUARIO) VALUES (LAST_INSERT_ID(),ID);
		SELECT "USUARIO REGISTRADO" AS MENSAJE;
	END IF;
	
END
//
DELIMITER ;
DROP PROCEDURE IF EXISTS LOGIN;
DELIMITER //

CREATE PROCEDURE LOGIN(USERS TEXT,PASS TEXT)
BEGIN
	DECLARE SESION BOOL;
	DECLARE EXISTE INT;
	SET EXISTE = (SELECT COUNT(USUARIO.USUARIO) FROM USUARIO WHERE USERS = USUARIO AND CONTRASENA = MD5(PASS));
	IF (EXISTE > 0) THEN
		SET SESION = TRUE;
		SELECT SESION AS SESION, USERS AS USUARIO;
		
	ELSE
		SET SESION = FALSE;
		SELECT SESION AS SESION;
	END IF;
END
//
DELIMITER ;
DROP PROCEDURE IF EXISTS ALTA_INGREDIENTE;
DELIMITER //
CREATE PROCEDURE ALTA_INGREDIENTE(NAME VARCHAR(50),DESCRIPTION TEXT,QUANTITY INT)
BEGIN
	DECLARE EXISTE INT;
	SET EXISTE = (SELECT COUNT(*) FROM INVENTARIO WHERE PRODUCTO = NAME);
	IF (EXISTE > 0) THEN
		SELECT "PRODUCTO YA EXISTENTE" AS MENSAJE;
	ELSE
		INSERT INTO INVENTARIO (PRODUCTO,CANTIDAD,DESCRIPCION) VALUES (NAME,QUANTITY,DESCRIPTION);
		SELECT "PRODUCTO REGISTRADO" AS MENSAJE;
	END IF;
END
//
DELIMITER ;
DROP PROCEDURE IF EXISTS ALTA_PRODUCTO;
DELIMITER //
CREATE PROCEDURE ALTA_PRODUCTO(NAME VARCHAR(40),DESCRIPTION TEXT,PRICE FLOAT ,IMAGE TEXT)
BEGIN
	DECLARE EXISTE INT;
	SET EXISTE = (SELECT COUNT(*) FROM PRODUCTO WHERE NOMBRE = NAME);
	IF (EXISTE > 0) THEN
		SELECT "PRODUCTO YA EXISTENTE" AS MENSAJE;
	ELSE
		INSERT INTO PRODUCTO (NOMBRE,DESCRIPCION,PRECIO,IMG) VALUES (NAME,DESCRIPTION,PRICE,IMAGE);
		SELECT "PRODUCTO REGISTRADO" AS MENSAJE;
	END IF;
END
//
DELIMITER ;
DROP PROCEDURE IF EXISTS ALTA_OFERTA;
DELIMITER //

CREATE PROCEDURE ALTA_OFERTA (TIPE TEXT, VALUE FLOAT)
BEGIN
	DECLARE EXISTE INT;
	SET EXISTE = (SELECT COUNT(*) FROM TIPO_OFERTAS WHERE TIPE = TIPO);
	IF (EXISTE > 0) THEN
		SELECT "OFERTA YA EXISTENTE" AS MENSAJE;
	ELSE
		INSERT INTO TIPO_OFERTAS(TIPO,VALOR) VALUES (TIPE,VALUE);
		SELECT "OFERTA REGISTRADA" AS MENSAJE;
	END IF;
END
//
DELIMITER ;
DROP PROCEDURE IF EXISTS REGISTRAR_OFERTA;
DELIMITER //
CREATE PROCEDURE REGISTRAR_OFERTA(TIPE TEXT,NAME VARCHAR(40))
BEGIN
	DECLARE ID_P INT;
	DECLARE ID_O INT;
	DECLARE EXISTE INT;
	SET ID_P = (SELECT ID_PRODUCTO FROM PRODUCTO WHERE NAME = NOMBRE);
	SET ID_O = (SELECT ID_TO FROM TIPO_OFERTAS WHERE TIPE = TIPO);
	SET EXISTE = (SELECT COUNT(*) FROM REL_OFERTAS_PRODUCTO WHERE ID_P = ID_PRODUCTO AND ID_O = ID_OFERTA);
	IF (EXISTE >0) THEN
	SELECT "OFERTA YA REGISTRADA" AS MENSAJE;
	ELSE
	INSERT INTO REL_OFERTAS_PRODUCTO (ID_OFERTA,ID_PRODUCTO) VALUES (ID_O,ID_P);
	SELECT "OFERTA REGISTRADA" AS MENSAJE;
	END IF;
END
//
DELIMITER ;
DROP PROCEDURE IF EXISTS AGREGAR_RECETA;
DELIMITER //
CREATE PROCEDURE AGREGAR_RECETA(INGREDIENTE VARCHAR(50),PRODUCT VARCHAR(40),QUANTITY INT)
BEGIN
	DECLARE ID_I INT;
    DECLARE ID_P INT;
   DECLARE EXISTE INT;
	SET ID_I =(SELECT ID_INVENTARIO FROM INVENTARIO WHERE INGREDIENTE = PRODUCTO);
    SET ID_P = (SELECT ID_PRODUCTO FROM PRODUCTO WHERE NOMBRE = PRODUCT);
    SET EXISTE = (SELECT COUNT(*)FROM REL_INVENTARIO_PRODUCTO WHERE ID_INVENTARIO = ID_I AND ID_PRODUCTO =ID_P);
    IF (ID_I > 0)  AND (ID_P > 0) AND (EXISTE < 1)THEN
		INSERT INTO REL_INVENTARIO_PRODUCTO(ID_INVENTARIO,ID_PRODUCTO,CANTIDAD) VALUES (ID_I,ID_P,QUANTITY);
        SELECT "SE REGISTRÃ“ EL INGREDIENTE" AS MENSAJE;
	ELSE
		SELECT "NO SE PUDO REGISTRAR" AS MENSAJE;
    END IF;
END 
//
DELIMITER ;
DROP PROCEDURE IF EXISTS ACT_DATOS;
DELIMITER //
CREATE PROCEDURE ACT_DATOS(NAME VARCHAR(50),APELL VARCHAR(50),SEX BOOL,DIR TEXT ,USR TEXT)
BEGIN
	DECLARE ID_P INT;
	DECLARE ID_D INT;
	SET ID_P = (SELECT ID_PERSONA FROM USUARIO WHERE USR = USUARIO);
	SET ID_D = (SELECT ID_DIRECCION FROM REL_DIR_PERSONA WHERE ID_P = ID_PERSONA);
	UPDATE DIRECCIONES SET DIRECCION=DIR WHERE ID_D= ID_DIRECCION;
	UPDATE PERSONA SET NOMBRE = NAME, APELLIDOS = APELL, SEXO = SEX WHERE ID_P = ID_PERSONA;

END
//

DELIMITER ;
DROP PROCEDURE IF EXISTS ACT_DATOS_TARJETA;
DELIMITER //
CREATE PROCEDURE ACT_DATOS_TARJETA(NAME VARCHAR(50),APELL VARCHAR(50),SEX BOOL,DIR TEXT ,USR TEXT,
NUMEROS TEXT,CVVV INT,BANCOS TEXT)
BEGIN
	DECLARE ID_U INT;
	DECLARE ID_P INT;
	DECLARE ID_D INT;
	DECLARE ID_T INT;
	SET ID_U = (SELECT ID_USUARIO FROM USUARIO WHERE USR = USUARIO);
	SET ID_P = (SELECT ID_PERSONA FROM USUARIO WHERE USR = USUARIO);
	SET ID_D = (SELECT ID_DIRECCION FROM REL_DIR_PERSONA WHERE ID_P = ID_PERSONA);
	SET ID_T = (SELECT ID_TARJETA FROM REL_TARJETA_USUARIO WHERE ID_U = ID_USUARIO);
	UPDATE DIRECCIONES SET DIRECCION=DIR WHERE ID_D= ID_DIRECCION;
	UPDATE PERSONA SET NOMBRE = NAME, APELLIDOS = APELL, SEXO = SEX WHERE ID_P = ID_PERSONA;
	IF ID_T > 0 THEN
		UPDATE TARJETA SET NUMERO = NUMEROS, CVV = CVVV, BANCO = BANCOS WHERE ID_T = ID_TARJETA;
	ELSE
		INSERT INTO TARJETA (NUMERO,CVV,BANCO,FONDOS) VALUES (NUMEROS,CVVV,BANCOS,CAST(RAND()*1000 AS INT));
		INSERT INTO REL_TARJETA_USUARIO (ID_TARJETA,ID_USUARIO) VALUES (LAST_INSERT_ID(),ID_P);
	END IF;
END //

DELIMITER ;
DROP PROCEDURE IF EXISTS CONS_USR;
DELIMITER //
CREATE PROCEDURE CONS_USR(USR VARCHAR(40))
BEGIN
	select nombre,apellidos,usuario,contrasena,direccion,numero,cvv,banco,sexo,fondos from persona 
	inner join usuario on persona.id_persona = usuario.id_persona
	inner join rel_dir_persona on rel_dir_persona.id_persona = persona.id_persona
	inner join direcciones on rel_dir_persona.id_direccion = direcciones.id_direccion
	left join rel_tarjeta_usuario on rel_tarjeta_usuario.id_usuario = usuario.id_usuario
	left join tarjeta on rel_tarjeta_usuario.id_tarjeta = tarjeta.id_tarjeta where usr = usuario;
END //

DELIMITER ;
DROP PROCEDURE IF EXISTS COMPRA_NORMAL;
DELIMITER //
CREATE PROCEDURE COMPRA_NORMAL(FECHA_ACT DATE,FECHA_PEDIDOS DATE,PASTEL VARCHAR(40),USR VARCHAR(40),CANTIDADD INT)
BEGIN
	DECLARE ID_U INT;
	DECLARE ID_P INT;
	DECLARE ID_T INT;
	DECLARE FONDOSI INT;
	DECLARE ID_PEDIDOI INT;
	DECLARE PRECIOS FLOAT;
	SET ID_U = (SELECT ID_USUARIO FROM USUARIO WHERE USR = USUARIO);
	SET ID_P = (SELECT ID_PRODUCTO FROM PRODUCTO WHERE NOMBRE = PASTEL);
	SET PRECIOS=(SELECT PRECIO FROM PRODUCTO WHERE ID_PRODUCTO = ID_P);
	SET ID_T = (select TARJETA.ID_TARJETA  from usuario
					left join rel_tarjeta_usuario on rel_tarjeta_usuario.id_usuario = usuario.id_usuario
					left join tarjeta on rel_tarjeta_usuario.id_tarjeta = tarjeta.id_tarjeta where USR = usuario);
	SET FONDOSI = (select fondos  from usuario
					left join rel_tarjeta_usuario on rel_tarjeta_usuario.id_usuario = usuario.id_usuario
					left join tarjeta on rel_tarjeta_usuario.id_tarjeta = tarjeta.id_tarjeta where USR = usuario);
	IF FONDOSI > (PRECIOS*CANTIDADD) THEN
		INSERT INTO PEDIDOS (ID_CLIENTE,ESTADO,FECHA_ENTREGA,FECHA_PEDIDO,CANTIDAD) VALUES (ID_U,"ENVIADO",FECHA_ACT,FECHA_PEDIDOS,CANTIDADD);
		SET ID_PEDIDOI = LAST_INSERT_ID();
		INSERT INTO REL_PEDIDOS_INVENTARIO (ID_PEDIDO,ID_MATERIALES) VALUES(ID_PEDIDOI,ID_P);
		INSERT INTO PENDIENTES(ID_PEDIDO) VALUES(ID_PEDIDOI);
		UPDATE TARJETA SET FONDOS = (FONDOS-(PRECIOS*CANTIDADD)) WHERE ID_TARJETA = ID_T;
		SELECT "COMPRA REALIZADA" AS MENSAJE;
	ELSE
		SELECT "FONDOS INSUFICIENTES" AS MENSAJE;
	END IF;
END //
DELIMITER ;
DROP PROCEDURE IF EXISTS REVISAR_PEDIDOS;
DELIMITER //
CREATE PROCEDURE REVISAR_PEDIDOS(USR TEXT)
BEGIN
select rel_pedidos_inventario.id_pedido as id,Nombre, Precio,estado,cantidad,fecha_entrega,fecha_pedido,usuario from rel_pedidos_inventario
inner join producto on id_materiales = id_producto
inner join pedidos on pedidos.id_pedido = rel_pedidos_inventario.ID_PEDIDO
inner join usuario on id_cliente = id_usuario where usuario=USR ;
END //
DELIMITER ;
DROP PROCEDURE IF EXISTS ALTA_PASTELERO;
DELIMITER //

CREATE PROCEDURE ALTA_PASTELERO(FNAME VARCHAR(50),LNAME VARCHAR(50),SEX BOOL,
USERS TEXT,PASS TEXT,DIR TEXT,NUMEROS TEXT,CVVV INT,BANCOS TEXT)
BEGIN
	DECLARE EXISTE INT;
	DECLARE ID INT;
	SET EXISTE = (SELECT COUNT(USUARIO.USUARIO) FROM USUARIO WHERE USERS = USUARIO);
	IF (EXISTE > 0) THEN
		SELECT "USUARIO YA EXISTENTE" AS MENSAJE;
	ELSE 
		INSERT INTO PERSONA(NOMBRE,APELLIDOS,SEXO) VALUES(FNAME,LNAME,SEX);
		SET ID = LAST_INSERT_ID();
		INSERT INTO USUARIO (USUARIO,CONTRASENA,ID_PERSONA,TIPO) VALUES (USERS,MD5(PASS),ID,"PASTELERO");
		INSERT INTO DIRECCIONES(DIRECCION) VALUES (DIR);
		INSERT INTO REL_DIR_PERSONA (ID_PERSONA,ID_DIRECCION) VALUES (ID,LAST_INSERT_ID());
		INSERT INTO TARJETA (NUMERO,CVV,BANCO,FONDOS) VALUES (NUMEROS,CVVV,BANCOS,CAST(RAND()*10000 AS INT));
		INSERT INTO REL_TARJETA_USUARIO (ID_TARJETA,ID_USUARIO) VALUES (LAST_INSERT_ID(),ID);
		SELECT "USUARIO REGISTRADO" AS MENSAJE;
	END IF;
	
END
//
DELIMITER ;
DROP PROCEDURE IF EXISTS LOGIN_P;
DELIMITER //

CREATE PROCEDURE LOGIN_P(USERS TEXT,PASS TEXT)
BEGIN
	DECLARE SESION BOOL;
	DECLARE EXISTE INT;
	SET EXISTE = (SELECT COUNT(USUARIO.USUARIO) FROM USUARIO WHERE USERS = USUARIO AND CONTRASENA = MD5(PASS) AND TIPO="PASTELERO");
	IF (EXISTE > 0) THEN
		SET SESION = TRUE;
		SELECT SESION AS SESION, USERS AS USUARIO;
		
	ELSE
		SET SESION = FALSE;
		SELECT SESION AS SESION;
	END IF;
END
//

DELIMITER ;
DROP PROCEDURE IF EXISTS REVISAR_PEDIDOSG;
DELIMITER //
CREATE PROCEDURE REVISAR_PEDIDOSG()
BEGIN
select pedidos.id_pedido, Nombre, Precio,estado,cantidad,fecha_entrega,fecha_pedido,usuario from rel_pedidos_inventario
inner join producto on id_materiales = id_producto
inner join pedidos on pedidos.id_pedido = rel_pedidos_inventario.ID_PEDIDO
inner join usuario on id_cliente = id_usuario where estado !="rechazado";
END //
DELIMITER ;
DROP PROCEDURE IF EXISTS RECHAZAR;
DELIMITER //
	CREATE PROCEDURE RECHAZAR(ID INT)
	BEGIN
		DECLARE PRECIOI FLOAT;
		DECLARE CANTIDADI INT;
		DECLARE ID_U INT;
		DECLARE ID_T INT;
		SET PRECIOI = (SELECT PRECIO FROM REL_PEDIDOS_INVENTARIO INNER JOIN PRODUCTO ON ID_MATERIALES = ID_PRODUCTO WHERE ID_PEDIDO = ID);
		SET CANTIDADI = (SELECT CANTIDAD FROM PEDIDOS WHERE ID_PEDIDO = ID);
		SET ID_U = (SELECT ID_CLIENTE FROM PEDIDOS WHERE ID_PEDIDO = ID);
		SET ID_T = (SELECT ID_TARJETA FROM REL_TARJETA_USUARIO WHERE ID_U = ID_USUARIO);
		UPDATE TARJETA SET FONDOS = (FONDOS+(PRECIOI*CANTIDADI)) WHERE ID_T = ID_TARJETA;
		UPDATE PEDIDOS SET ESTADO = "RECHAZADO" WHERE ID_PEDIDO = ID;
		SELECT PRECIOI,CANTIDADI;
	END //
DELIMITER ;

DROP PROCEDURE IF EXISTS ACEPTAR;
DELIMITER //
CREATE PROCEDURE ACEPTAR(ID INT)
	BEGIN
		UPDATE PEDIDOS SET ESTADO = "ACEPTADO" WHERE ID_PEDIDO = ID;
	END //
DELIMITER ;
DROP PROCEDURE IF EXISTS REVISAR_INVENTARIO;
DELIMITER //

CREATE PROCEDURE REVISAR_INVENTARIO()
BEGIN
	select id_relacion, rel_inventario_producto.cantidad as requerido, producto,
inventario.cantidad as disponible, nombre from rel_inventario_producto
 inner join inventario on inventario.id_inventario = rel_inventario_producto.id_inventario
inner join producto on producto.id_producto = rel_inventario_producto.id_producto;
END //
DELIMITER ;
DROP PROCEDURE IF EXISTS REVISAR_INVENTARIO_FILTRO;
DELIMITER //

CREATE PROCEDURE REVISAR_INVENTARIO_FILTRO(CONDICION VARCHAR(40))
BEGIN
	select id_relacion, rel_inventario_producto.cantidad as requerido, producto,
inventario.cantidad as disponible, nombre from rel_inventario_producto
 inner join inventario on inventario.id_inventario = rel_inventario_producto.id_inventario
inner join producto on producto.id_producto = rel_inventario_producto.id_producto
WHERE producto = condicion or nombre = condicion;
END //
DELIMITER ;
DROP PROCEDURE IF EXISTS ELIMINAR_INGREDIENTE;
DELIMITER //
CREATE PROCEDURE ELIMINAR_INGREDIENTE(ID_ELIMINAR INT)
BEGIN
	DELETE FROM REL_INVENTARIO_PRODUCTO WHERE ID_RELACION = ID_ELIMINAR;
END //

DELIMITER ;
DROP PROCEDURE IF EXISTS SURTIR;
DELIMITER //
CREATE PROCEDURE SURTIR(NAME VARCHAR(40),QUANTITY INT)
BEGIN
	DECLARE ID INT;
	SET ID = (SELECT ID_INVENTARIO FROM INVENTARIO WHERE NAME = PRODUCTO);
	IF ID > 0 THEN
	UPDATE  INVENTARIO SET CANTIDAD = QUANTITY WHERE ID_INVENTARIO = ID;
	SELECT "PRODUCTO ACTUALIZADO" AS MENSAJE;
	ELSE
	SELECT "NO SE PUDO ACTUALIZAR EL PRODUCTO";
	END IF;
END //
DELIMITER ;
DROP PROCEDURE IF EXISTS ELIMINAR_PEDIDO;
DELIMITER //
CREATE PROCEDURE ELIMINAR_PEDIDO(ID INT)
BEGIN 
	DECLARE ID_R INT;
	DECLARE ID_C INT;
	DECLARE ID_T INT;
	DECLARE CANTIDADI INT;
	DECLARE PRECIOI FLOAT;
	DECLARE STATE TEXT;
	SET STATE = (SELECT ESTADO FROM PEDIDOS WHERE ID_PEDIDO = ID);
	SET CANTIDADI = (SELECT CANTIDAD FROM PEDIDOS WHERE ID_PEDIDO = ID); 

	SET ID_R = (SELECT ID_REL FROM REL_PEDIDOS_INVENTARIO WHERE ID_PEDIDO = ID);
		SET PRECIOI = (SELECT precio FROM REL_PEDIDOS_INVENTARIO inner join producto on id_materiales = id_producto where id_rel = id_r);
	SET ID_C = (SELECT ID_CLIENTE FROM PEDIDOS WHERE ID_PEDIDO = ID);
	SET ID_T = (SELECT ID_TARJETA FROM REL_TARJETA_USUARIO WHERE ID_USUARIO = ID_C);
	IF STATE != "ACEPTADO" THEN	
	DELETE FROM PENDIENTES WHERE ID_PEDIDO = ID;
	DELETE FROM REL_PEDIDOS_INVENTARIO WHERE ID_REL = ID_R;
	DELETE FROM PEDIDOS WHERE ID_PEDIDO =ID;
	UPDATE TARJETA SET FONDOS = (FONDOS + (CANTIDADI*PRECIOI)) WHERE ID_TARJETA = ID_T;
		SELECT "PEDIDO CANCELADO" AS MENSAJE;
	ELSE
		SELECT "EL ENVIO YA SE HA PROCESADO" AS MENSAJE;
	END IF;

END //